@page "/Account/Manage/ResetPassword"
@inject IDialogService DialogService
@inject ConfirmationDialog ConfirmDialog
@if (success == true)
{
    <MudAlert Severity="Severity.Success">Success</MudAlert>
}
else if (validation != string.Empty)
{
    <MudAlert Severity="Severity.Warning">@validation</MudAlert>
}
else if (@error != string.Empty)
{
    <MudAlert Severity="Severity.Error">@error</MudAlert>
}

@if (@User == null)
{
    error = "Current user password data not fetched!";
}
else
{
    <EditForm Model="@User" OnValidSubmit="ShowConfirmationDialog">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTextField ReadOnly="true" @bind-Value="@User.UserId" Label="User Id" For="@(() => User.UserId)"></MudTextField>
                <MudTextField ReadOnly="true" @bind-Value="@User.UserName" Label="User Name" For="@(() => User.UserName)"></MudTextField>                
                <MudTextField ReadOnly="true" @bind-Value="@GeneratedPassword" Label="OneTime Password"></MudTextField>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit">Reset Password</MudButton>
            </MudCardActions>
        </MudCard>

    </EditForm>
}

@code {
    [Inject] IUserAccountManager userAccountManager { get; set; }
    
    public string validation { get; set; } = string.Empty;
    public string error { get; set; } = string.Empty;
    private bool success;
    private string GeneratedPassword { get; set; } = string.Empty;
    [Parameter]
    public UserAccountDto User { get; set; }

    // [Parameter]
    // public bool ShowValidationSummary { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (User == null)
        {
            error = "User User can not be null!";
        }

    }
    private async Task OnValidSubmitAsync()
    {
        try
        {
            // User confirmed, proceed with submission
            error = string.Empty;
            validation = string.Empty;
            if (!string.IsNullOrEmpty(User.UserId))
            {


                var result = await userAccountManager.ResetUserPassword(User.UserId);

                if (result.Success)
                {
                    GeneratedPassword = result.Data;
                    success = true;
                }
                else
                {
                    success = false;
                    error = result.Message;
                }
            }
            else
            {
                error = "UserId is empty!";
            }


        }
        catch (Exception ex)
        {
            error = ex.Message;
            throw new Exception(ex.Message);
        }

    }
    async Task ShowConfirmationDialog(EditContext context)
    {
        // Use MudDialogParameters instead of DialogParameters
        var param = new DialogParameters();
        param.Add("ConfirmationMessage", "Reset Password?");
        var dialogResult = await DialogService.ShowAsync<ConfirmationDialog>("Reset Password", param);
        var result = (bool)(await dialogResult.Result).Data;
        if (result == true)
        {
            await OnValidSubmitAsync();
        }
        
    }
}