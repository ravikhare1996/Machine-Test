@page "/Account/Manage/ChangePassword"
@* <h1>User Profile</h1>
 *@

@if (success==true)
{
    <MudAlert Severity="Severity.Success">Success</MudAlert>
}
else if (validation!=string.Empty)
{
    <MudAlert Severity="Severity.Warning">@validation</MudAlert>
}
else if (@error!=string.Empty)
{
    <MudAlert Severity="Severity.Error">@error</MudAlert>
}

@if (@User==null)
{
    error = "Current user password data not fetched!";
}
else
{
    <EditForm Model="@Model" OnValidSubmit="OnValidSubmitAsync">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTextField ReadOnly="true" @bind-Value="@Model.UserId" Label="User Id" For="@(() => Model.UserId)"></MudTextField>
                <MudTextField ReadOnly="true" @bind-Value="@Model.UserName" Label="User Name" For="@(() => Model.UserName)"></MudTextField>
                <MudTextField InputType="InputType.Password" @bind-Value="@Model.Password" Label="Current Password" For="@(() => Model.Password)"></MudTextField>
                <MudTextField InputType="InputType.Password" @bind-Value="@Model.NewPassword" Label="New Password" For="@(() => Model.NewPassword)"></MudTextField>
                <MudTextField InputType="InputType.Password" @bind-Value="@Model.ConfirmPassword" Label="Confirm Password" For="@(() => Model.ConfirmPassword)"></MudTextField>
                
            </MudCardContent>
            <MudCardActions>
                <MudButton  ButtonType="ButtonType.Submit">Change Password</MudButton>
            </MudCardActions>
        </MudCard>
        
    </EditForm>
}

@code {
    [Inject] IUserAccountManager userAccountManager { get; set; }
    
    public string validation { get; set; } = string.Empty;
    public string error { get; set; } = string.Empty;
    private bool success;
    [Parameter]
    public UserAccountDto User { get; set; }

    private ChangePasswordModel Model { get; set; } = new ChangePasswordModel();

    // [Parameter]
    // public bool ShowValidationSummary { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (User == null)
        {
            error = "User Model can not be null!";
        }
        else
        {
            Model.UserId = User.UserId;   
            Model.UserName = User.UserName;
        }

    }
    private async Task OnValidSubmitAsync(EditContext context)
    {
        try
        {
            error = string.Empty;
            validation = string.Empty;
            if (!string.IsNullOrEmpty(User.UserId))
            {
                if (Model.Password == string.Empty)
                {
                    validation = "Enter current password!!";
                    return;
                }
                if (Model.NewPassword==string.Empty)
                {
                    validation = "Enter new password!!";
                    return;
                }
                if (Model.NewPassword != Model.ConfirmPassword)
                {
                    validation = "New password and Confirm password does not match!!";
                    return;
                }
                if ((await userAccountManager.ValidateUserPassword(User.UserId, Model.Password)).Data == true)
                {
                    var result = await userAccountManager.ChangeUserPassword(User.UserId, Model.Password, Model.NewPassword);

                    if (result.Success)
                    {
                        success = true;
                    }
                    else
                    {
                        success = false;
                        error = result.Message;
                    }
                }
                else
                {
                    error = "Current password is not valid!!";
                }

            }
            else
            {
                error = "UserId is empty!";
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
            throw new Exception(ex.Message);
        }
        
    }
    public class ChangePasswordModel
    {
        public string UserId { get; set; }
        public string UserName { get; set; }
        public string Password { get; set; }
        public string NewPassword { get; set; }
        public string ConfirmPassword { get; set; }
    }
}
